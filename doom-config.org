#+TITLE: Doom Config
* DOOM TEMPLATE

Place your private configuration here! Remember, you do not need to run 'doom
sync' after modifying this file!

If you use `org' and don't want your org files in the default location below,
change `org-directory'. It must be set before org loads!

Some functionality uses this to identify you, e.g. GPG configuration, email
clients, file templates and snippets.

#+begin_src emacs-lisp :tangle yes
(setq user-full-name "David Stearns"
      user-mail-address "d.f.stearns@gmail.com")

(display-time-mode t)

(unless (string-match-p "^Power N/A" (battery))
  (display-battery-mode t))
#+end_src

Doom exposes five (optional) variables for controlling fonts in Doom. Here
are the three important ones:


+ `doom-font'
+ `doom-variable-pitch-font'
+ `doom-big-font' -- used for `doom-big-font-mode'; use this for
  presentations or streaming.

They all accept either a font-spec, font string ("Input Mono-12"), or xlfd
font string. You generally only need these two:

;; (setq doom-font (font-spec :family "monospace" :size 12 :weight 'semi-light)
;;      doom-variable-pitch-font (font-spec :family "sans" :size 13))

There are two ways to load a theme. Both assume the theme is installed and
available. You can either set `doom-theme' or manually load a theme with the
`load-theme' function. This is the default:

;; Here are some additional functions/macros that could help you configure Doom:
;;
;; - `load!' for loading external *.el files relative to this one
;; - `use-package!' for configuring packages
;; - `after!' for running code after a package has loaded
;; - `add-load-path!' for adding directories to the `load-path', relative to
;;   this file. Emacs searches the `load-path' when you load packages with
;;   `require' or `use-package'.
;; - `map!' for binding new keys
;;
;; To get information about any of these functions/macros, move the cursor over
;; the highlighted symbol at press 'K' (non-evil users must press 'C-c c k').
;; This will open documentation for it, including demos of how they are used.
;;
;; You can also try 'gd' (or 'C-c c d') to jump to their definition and see how
;; they are implemented.

#+begin_src emacs-lisp :tangle yes
(setq doom-theme 'doom-one)
#+end_src

This determines the style of line numbers in effect. If set to `nil', line
numbers are disabled. For relative line numbers, set this to `relative'.
#+begin_src emacs-lisp :tangle yes
(setq display-line-numbers-type t)
#+end_src

* CUSTOM VARIABLES

#+begin_src emacs-lisp :tangle yes
(setq racket-program "/Applications/Racket v8.6/bin/racket")
#+end_src

* PACKAGE CONFIGURATIONS
** TODO make this work
#+begin_src emacs-lisp :tangle yes
;; (use-package! org-transclusion
;;   :after org
;;   :init
;;   (map!
;;    :map global-map "<f12>" #'org-transclusion-add
;;    :leader
;;    :prefix "n"
;;    :desc "Org Transclusion Mode" "t" #'org-transclusion-mode))
#+end_src
*** F-Sharp Config
#+begin_src emacs-lisp :tangle yes

(with-eval-after-load 'fsharp-mode
  (add-hook 'fsharp-mode-hook #'origami-mode))

(add-to-list 'evil-fold-list
             '((fsharp-mode)
               :close (lambda ()
                        (origami-close-node (current-buffer) (point)))
               :open (lambda ()
                       (origami-open-node (current-buffer) (point)))
               :toggle (lambda ()
                         (origami-toggle-node (current-buffer) (point)))))

;; (defun cfg-outline-indent-level ()
;;   "determine outline level based on indentation"
;;   (let (buffer-invisibility-spec)
;;     (save-excursion
;;       (beginning-of-line)
;;       (skip-chars-forward " ")
;;       (+ 1 (current-column)))))

;; (defun cfg-fsharp-enable-folding ()
;;   "enables folding for fsharp"
;;   (setq-local outline-regexp "^ *\\(\\w\\|/\\)")
;;   (setq-local outline-level #'cfg-outline-indent-level)
;;   (outline-minor-mode 1))

;; (defun cfg-fsharp ()
;;   "Configure fsharp environment"
;;   (with-eval-after-load 'fsharp-mode
;;     (add-hook 'fsharp-mode-hook #'cfg-fsharp-enable-folding)))

;; (defun cfg-outline ()
;;   "Optional - Configure evil-fold for outline-minor-mode"
;;   (add-to-list 'evil-fold-list '((outline-minor-mode)
;;                                  :open-all   outline-show-all
;;                                  :close-all  (lambda () (call-interactively 'outline-hide-sublevels))
;;                                  :toggle     outline-toggle-children
;;                                  :open       outline-show-children
;;                                  :open-rec   nil
;;                                  :close      outline-hide-subtree)))

;; (cfg-fsharp)
;; (cfg-outline)
#+end_src

#+RESULTS:
| (fsharp-mode)                                            | :close    | (lambda nil (origami-close-node (current-buffer) (point))) | :open      | (lambda nil (origami-open-node (current-buffer) (point))) | :toggle | (lambda nil (origami-toggle-node (current-buffer) (point))) |       |                                                           |           |                                                           |        |                                                            |
| (vdiff-mode)                                             | :open-all | vdiff-open-all-folds                                       | :close-all | vdiff-close-all-folds                                     | :toggle | #[0 \300\301!\207 [call-interactively vdiff-toggle-fold] 2] | :open | #[0 \300\301!\207 [call-interactively vdiff-open-fold] 2] | :open-rec | #[0 \300\301!\207 [call-interactively vdiff-open-fold] 2] | :close | #[0 \300\301!\207 [call-interactively vdiff-close-fold] 2] |
| (vdiff-3way-mode)                                        | :open-all | vdiff-open-all-folds                                       | :close-all | vdiff-close-all-folds                                     | :toggle | #[0 \300\301!\207 [call-interactively vdiff-toggle-fold] 2] | :open | #[0 \300\301!\207 [call-interactively vdiff-open-fold] 2] | :open-rec | #[0 \300\301!\207 [call-interactively vdiff-open-fold] 2] | :close | #[0 \300\301!\207 [call-interactively vdiff-close-fold] 2] |
| (hs-minor-mode)                                          | :open-all | hs-show-all                                                | :close-all | hs-hide-all                                               | :toggle | hs-toggle-hiding                                            | :open | hs-show-block                                             | :open-rec | nil                                                       | :close | hs-hide-block                                              |
| (hide-ifdef-mode)                                        | :open-all | show-ifdefs                                                | :close-all | hide-ifdefs                                               | :toggle | nil                                                         | :open | show-ifdef-block                                          | :open-rec | nil                                                       | :close | hide-ifdef-block                                           |
| (outline-mode outline-minor-mode org-mode markdown-mode) | :open-all | show-all                                                   | :close-all | #[0 \300\301!\207 [hide-sublevels 1] 2]                   | :toggle | outline-toggle-children                                     | :open | #[0 \300 \210\301 \207 [show-entry show-children] 1]      | :open-rec | show-subtree                                              | :close | hide-subtree                                               |
| (origami-mode)                                           | :open-all | #[0 \300p!\207 [origami-open-all-nodes] 2]                 | :close-all | #[0 \300p!\207 [origami-close-all-nodes] 2]               | :toggle | #[0 \300p`"\207 [origami-toggle-node] 3]                    | :open | #[0 \300p`"\207 [origami-open-node] 3]                    | :open-rec | #[0 \300p`"\207 [origami-open-node-recursively] 3]        | :close | #[0 \300p`"\207 [origami-close-node] 3]                    |
*** Hass-Mode
#+begin_src emacs-lisp :tangle yes
(setq hass-host "prjwk6i94rtc5eajnaxubj04rkxhrey2.ui.nabu.casa")
;; (setq hass-host "homeassistant.local")
(setq hass-apikey "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiI0NzRkYTQ4YzQ5MTU0OWU2OGEwNGQyMTUxMzFiOGYyMSIsImlhdCI6MTcwMDk4NTExMCwiZXhwIjoyMDE2MzQ1MTEwfQ.bF6btBTKhljRvGu4YJN199EgO7wo2eUHjtX-8-y3oQQ")

(setq hass-dash-layouts
      '((default . ((hass-dash-group
                     :title "Lights"
                     :format "%t\n\n%v"
                     (hass-dash-toggle :entity-id "light.billiards")
                     (hass-dash-toggle :entity-id "light.dining_and-hallway")
                     (hass-dash-toggle :entity-id "light.downstairs")
                     (hass-dash-toggle :entity-id "light.drawing_and_office")
                     (hass-dash-toggle :entity-id "light.kitchen_area")
                     (hass-dash-toggle :entity-id "light.main_floor")
                     (hass-dash-toggle :entity-id "light.outside")
                     (hass-dash-toggle :entity-id "light.stairs"))))))

;; (hass-ensure)

#+end_src

* CUSTOM FUNCS
** Text Funcs
#+begin_src emacs-lisp :tangle yes
(defun dfs/bump-line-up ()
  (interactive)
  (let ((cur-pos-line (- (point) (line-beginning-position)))
        (line (buffer-substring-no-properties (line-beginning-position) (line-end-position))))
    (delete-region (line-beginning-position) (+ 1 (line-end-position)))
    (beginning-of-line)
    (forward-line -1)
    (insert line)
    (newline)
    (forward-line -1)
    (forward-char cur-pos-line)))

(defun dfs/bump-line-down ()
  (interactive)
  (let ((cur-pos-line (- (point) (line-beginning-position)))
        (line (buffer-substring-no-properties (line-beginning-position) (line-end-position))))
    (delete-region (line-beginning-position) (+ 1 (line-end-position)))
    (beginning-of-line)
    (forward-line 1)
    (insert line)
    (newline)
    (forward-line -1)
    (forward-char cur-pos-line)))

(defun dfs/add-todo-comment ()
  "Adds a TODO Comment"
  (interactive)
  (move-end-of-line nil)
  (newline)
  (indent-for-tab-command)
  (insert "TODO: ")
  (back-to-indentation)
  (set-mark-command nil)
  (move-end-of-line nil)
  (comment-dwim nil)
  (evil-insert-state))

;; (defun dfs/create-fold-with-marks (name)
;;   "Wraps the selected field with fold marks"
;;   (interactive "sFold Name: ")
;;   (save-excursion
;;     (let ((region-first (region-beginning))
;;           (region-last (region-end)))

;;       ;; Add the marks at the end
;;       (goto-char region-last)
;;       (newline)
;;       (push-mark)
;;       (insert (format "%s" (cdr vimish-fold-marks)))
;;       (comment-dwim nil)

;;       ;; Add marks at the beginning
;;       (goto-char region-first)
;;       (forward-line -1)
;;       (newline)
;;       (push-mark (line-beginning-position))
;;       (goto-char (line-beginning-position))
;;       (insert (format "%s %s" name (car vimish-fold-marks)))
;;       (comment-dwim nil)
;;       (vimish-fold-from-marks))))

;; (format "%s" (cdr vimish-fold-marks))

#+end_src

* ORG
** SETUP
*** Org Todo Keywords
#+begin_src emacs-lisp :tangle yes
(setq dfs/org-keywords
  '((sequence "TODO(t!)" "PROJ(p)" "LOOP(r)" "STRT(s)" "DGATE(g@/!)" "WAIT(w@/!)"
              "HOLD(h@)" "IDEA(i)" "|" "DONE(d!)" "KILL(k!)")
    (sequence "[ ](T)" "[-](S)" "[?](W)" "|" "[X](D)")
    (sequence "|" "OKAY(o)" "YES(y)" "NO(n)")))

#+end_src
*** Setup Funcs

#+begin_src emacs-lisp :tangle yes
(require 'org-id)
(require 'org-expiry)

(defun set-org-dir ()
  (require 'org)
  (setq org-directory (if (eq system-type 'darwin)
                        "~/Docs/org"
                        "~/org")))

(set-org-dir)

(defun dfs-insert-created-timestamp (_)
  "Insert a 'Created' property for every todo that is created"
  (org-expiry-insert-created)
  (org-back-to-heading)
  (org-end-of-line)
  (evil-insert 1))

(defun dfs/insert-id (_)
  "Insert an 'ID' property for every todo that is created"
  (org-id-get-create)
  (org-back-to-heading)
  (org-end-of-line)
  (evil-insert 1))

(setq dfs/org-protocol-capture-templates
      '(("e" "Email Capture" entry (id "89f73e32-77ec-4052-94aa-22753c0c5a27")
         "** EMAIL %(plist-get dfs/org-protocol-query :title) harharhar %(plist-get dfs/org-protocol-query :sched) %U"
         :immediate-finish t)))

(setq org-browser-capture-file (if (eq system-type 'darwin)
                           "~/Docs/org/browser-capture.org"
                           "~/org/browser-capture.org"))

(setq dfs/org-capture-templates
      '(("c" "Cookbook")
        ("cc" "Cookbook (from url)" entry (file "cookbook.org")
         "%(org-chef-get-recipe-from-url)"
         :empty-lines 1)
        ("w" "Chuck Walk" table-line
         (id  "b42729b6-1cc1-460c-a7b5-6b0eb8a3970f")
         "| %u | %^{Time|morning|afternoon|evening} | %^{Slowdown} | %^{Notes} |")
        ("j" "Journal Entry" entry
         (file+olp+datetree "journal.org" )
         "* %?"
         :time-prompt t)
        ("r" "Reviews")
        ("rg" "Generic Review" entry (file+olp+datetree "journal.org")
         "* %^{Title} %^g\n%^{Rating}p %?"
         :time-prompt t)
        ("rm" "Movie" entry (file+olp+datetree "journal.org")
         "* %^{Title} :movie:\n%^{Rating}p%?"
         :time-prompt t)
        ("d" "Protocol" entry (file+headline org-browser-capture-file "Snippet")
         "** %?[[%:link][%:description]]\nCaptured On: %U\n#+BEGIN_QUOTE\n%i\n#+END_QUOTE\n"
         ;;  :immediate-finish t
         )
        ("L" "Protocol Link" entry (file+headline org-browser-capture-file "Link")
         "** %?[[%:link][%:description]] \nCaptured On: %U"
         ;; :immediate-finish t
         )))

(defun dfs/org-setup ()
  (require 'org-id)
  (require 'org-expiry)
  (advice-add 'org-insert-todo-heading :after #'dfs/insert-created-timestamp)
  (advice-add 'org-insert-todo-heading :after #'dfs/insert-id)
  (set-org-dir)



  (setq org-roam-directory (if (eq system-type 'darwin)
                               "~/Docs/org-roam"
                             "~/org-roam"))

  (defun dfs/org-file-name (name)
    (if (stringp name)
        (concat org-directory "/" name)
      ""))

  (setq org-treat-insert-todo-heading-as-state-change t)

  (setq org-agenda-files (if (eq system-type 'darwin)
                             '("~/Docs/work_org" "~/Docs/org")
                           '("~/work_org" "~/org")))

  (setq org-todo-keywords dfs/org-keywords)

  (setq org-capture-templates
        (append
         dfs/org-capture-templates
         org-capture-templates
         dfs/org-protocol-capture-templates))

  (setq org-log-into-drawer t)
  (setq org-agenda-follow-mode t)


  (org-bullets-mode 1)
  (org-babel-do-load-languages 'org-babel-load-languages
                               '((emacs-lisp . t)
                                 (sqlite . t))))

(after! org
  (dfs/org-setup)
 (set-org-dir))

(set-org-dir)
(add-hook 'org-capture-mode-hook #'dfs/org-setup)
(add-hook 'org-agenda-mode-hook #'dfs/org-setup)
(add-hook 'org-mode-hook #'dfs/org-setup)

#+end_src

#+RESULTS:
***

*** Custom Agenda Views
#+begin_src emacs-lisp :tangle yes
;; (setq org-agenda-custom-commands
;;       (("n" "Agenda and all TODOs"
;;         ((agenda "")
;;          (alltodo "")))
;;        ("c" "All TODOs by Category (source file)"
;;         ((agenda "")))))
#+end_src
*** Capture Templates
#+begin_src emacs-lisp :tangle yes


#+end_src
*** Org protocol
org protocol handlers

#+begin_src emacs-lisp :tangle yes
;;(setq dfs/deadline-pairs (list
;;                          (:a . file)
;;                          (:b . file2)
;;                          (:c . file3)))
;;(setq dfs/deadline-search-terms (make-hash-table :size 20))
;;(clrhash dfs/deadline-search-terms)
;;(dolist (p dfs/deadline-pairs)
;;  (puthash (car p) (cdr p) dfs/deadline-search-terms))
;;(hash-table-keys dfs/deadline-search-terms)
;;(gethash :a dfs/deadline-search-terms)
#+end_src

#+begin_src emacs-lisp :tangle yes
(defun dfs-org-protocol-email-munch (query)
  (setq dfs/org-protocol-query query)
  (org-capture nil "e"))

(unless (boundp 'org-protocol-protocol-alist)
  (setq org-protocol-protocol-alist '()))

(add-to-list 'org-protocol-protocol-alist
             '("email handler"
               :protocol "email-munch"
               :function dfs-org-protocol-email-munch))

                                        ;(dfs-org-protocol-email-munch "abcitt")
#+end_src
** CLEANUP Funcs
#+begin_src emacs-lisp :tangle yes
(defun dfs/org-archive-all-done ()
  (interactive)
  (let (dones '())
    (-> (org-element-parse-buffer)
        (org-element-map 'headline
            (lambda (item)
              (when (eq (org-element-property :todo-type item) 'done)
                (setq dones (cons item dones))))))
    (sort dones (lambda (a b)
                  (> (org-element-property :begin a)
                     (org-element-property :begin b))))
    (mapcar (lambda (el)
              (goto-char (org-element-property :begin el))
              (org-archive-subtree)) dones)))
#+end_src
** EXPOSE FUNCS
#+begin_src emacs-lisp :tangle yes
    (require 'ox-json)

    (defun dfs/agenda-file-names ()
        (->> org-agenda-files
            (-map #'dfs/file-or-dir-files)
            -flatten
            (-filter (lambda (x) x))
            (-remove (lambda (s) (string-match-p "/\.git" s)))))

    (defun dfs/file-or-dir-files (name)
        (if (file-directory-p name)
            (directory-files-recursively name ".*\.org")
            (if (and (file-exists-p name)
                     (string-match-p ".*\.org" name))
              name
              nil)))

    (defun dfs/org-file-to-elements (name)
        (with-temp-buffer
            (insert-file-contents name)
            (org-element-parse-buffer)))

    (defun dfs/org-file-to-json (name)
        (with-temp-buffer
            (insert-file-contents name)
            (ox-json-export-to-buffer))
        (with-current-buffer "*Org JSON Export*"
            (let  ((s (buffer-string)))
            (erase-buffer)
            (kill-buffer-and-window)
            s)))

    (defun dfs/org-agenda-files-json ()
        (->> (dfs/agenda-file-names)
            (mapcar #'dfs/org-file-to-json)
            vconcat
            json-serialize))

    (defun dfs/org-agenda-file-names-json ()
        (->> (dfs/agenda-file-names)
            vconcat
            json-serialize))

#+end_src

** HOOKS
*** org-after-todo-state-change-hook
:LOGBOOK:
- State "KILL"       from "TODO"       [2022-07-16 Sat 13:33]
- State "TODO"       from              [2022-07-16 Sat 13:33]
:END:
#+begin_src emacs-lisp :tangle yes

(defun dfs/org-after-todo-state-change-fn ()
  (cond ((string= org-state "WAIT")
         (org-schedule 1))))

(add-hook 'org-after-todo-state-change-hook #'dfs/org-after-todo-state-change-fn)
#+end_src

** TODO ORG EXHIBIT/TERMS TRACKER
:PROPERTIES:
:CREATED:  <2022-07-16 Sat 16:37>
:END:
:LOGBOOK:
:END:

#+begin_src emacs-lisp :tangle yes
    (defun dfs/apply-concat (list-of-lists)
        (-reduce-from (lambda (acc v)
                        (append acc v))
                        '()
                        list-of-lists))

    (defun dfs/org-elements-of-type (tree type)
        (org-element-map tree type #'identity))

    (defun dfs/org-get-table-by-name (name)
        (->> (dfs/org-elements-of-type (org-element-parse-buffer) 'table)
            (-filter (lambda (table) (equal name (org-element-property :name table))))
            car))

    (defun dfs/vec->list (vec)
        (append vec '()))

    (defun dfs/row-coords->fields (row-coord)
        "must be in the table"
        (-map (lambda (coord)
                (let ((r (elt coord 0))
                    (c (elt coord 1)))
                (org-table-get r c))) row-coord))

    (defun dfs/org-table-fields ()
        (->> org-table-dlines
            dfs/vec->list
            (-filter #'identity)
            (-map-indexed (lambda (index el) (+ 1 index)))
            (-map (lambda (r)
                    (let ((c org-table-current-ncol)
                            (ret '()))
                        (while (< 0 c)
                        (setq ret (cons (list r c) ret))
                        (setq c (- c 1)))
                        ret)))
            (-map #'dfs/row-coords->fields)))

    (defun dfs/org-table-by-name->values (name)
        (save-excursion
        (let* ((tbl (dfs/org-get-table-by-name name))
                (start (org-element-property :begin tbl)))
            (goto-char (+ 1 start))
            (org-table-analyze)
            (dfs/org-table-fields))))
#+end_src

#+RESULTS:
: dfs/org-table-by-name->values

* KEY BINDINGS
#+begin_src emacs-lisp :tangle yes
(map! :leader
      (:prefix ("k" . "parens conveniens")
       :desc "kill sexp" "k" #'kill-sexp
       :desc "wrap sexp" "w" #'sp-wrap-round
       :desc "barf" "b" #'sp-forward-barf-sexp
       :desc "slurp" "s" #'sp-forward-slurp-sexp
       :desc "raise" "r" #'sp-raise-sexp))

(map! :leader
      (:prefix ("d" . "dfs")
       :desc "add-todo-comment" "t" #'dfs/add-todo-comment
       :desc "create named fold from region" "f" #'dfs/create-fold-with-marks))

(map! "s-k" #'dfs/bump-line-up
      "s-j" #'dfs/bump-line-down)

(add-to-list 'image-types 'svg)
#+end_src
* FILE TEMPLATES
#+begin_src emacs-lisp :tangle yes
(set-file-template! "/work_org/.+\\.org$" :trigger "__new-work" :mode 'org-mode)
#+end_src
* LIGATURES
#+begin_src emacs-lisp :tangle yes

#+end_src
* Hammerspoon
#+begin_src emacs-lisp :tangle yes
(if (eq system-type 'darwin)
    (load "~/.hammerspoon/Spoons/editWithEmacs.spoon/hammerspoon.el"))
#+end_src
* Server Functions
#+begin_src emacs-lisp :tangle yes
(defun dfs/export-org-file-to-ahotw (f-name)
  ;; (interactive)
  (with-temp-buffer
    (progn
      (insert-file-contents f-name)
      (org-html-export-to-html nil nil t t)))
    )
#+end_src
