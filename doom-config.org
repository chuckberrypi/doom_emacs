#+TITLE: Doom Config

* KEY BINDINGS

    #+begin_src emacs-lisp
        (map! :leader (:prefix ("k" . "parens conveniens")
                       :desc "kill sexp" "k" #'kill-sexp
                       :desc "wrap sexp" "w" #'sp-wrap-round
                       :desc "barf" "b" #'sp-forward-barf-sexp
                       :desc "slurp" "s" #'sp-forward-slurp-sexp
                       :desc "raise" "r" #'sp-raise-sexp))

        (map! "s-k" #'dfs/bump-line-up
              "s-j" #'dfs/bump-line-down)
    #+end_src

* DOOM TEMPLATE

Some functionality uses this to identify you, e.g. GPG configuration, email
clients, file templates and snippets.

#+begin_src emacs-lisp
    (setq user-full-name "David Stearns"
          user-mail-address "d.f.stearns@gmail.com")
#+end_src

Doom exposes five (optional) variables for controlling fonts in Doom. Here
are the three important ones:

+ `doom-font'
+ `doom-variable-pitch-font'
+ `doom-big-font' -- used for `doom-big-font-mode'; use this for
  presentations or streaming.

They all accept either a font-spec, font string ("Input Mono-12"), or xlfd
font string. You generally only need these two:

#+begin_src emacs-lisp
(setq doom-font (font-spec :family "monospace" :size 12 :weight 'semi-light)
      doom-variable-pitch-font (font-spec :family "sans" :size 13))
#+end_src

There are two ways to load a theme. Both assume the theme is installed and
available. You can either set `doom-theme' or manually load a theme with the
`load-theme' function. This is the default:

#+begin_src emacs-lisp
(setq doom-theme 'doom-one)
#+end_src

This determines the style of line numbers in effect. If set to `nil', line
numbers are disabled. For relative line numbers, set this to `relative'.
#+begin_src emacs-lisp
(setq display-line-numbers-type t)
#+end_src
* PACKAGE CONFIGURATIONS
#+begin_src emacs-lisp
(use-package! org-transclusion
  :after org
  :init
  (map!
   :map global-map "<f12>" #'org-transclusion-add
   :leader
   :prefix "n"
   :desc "Org Transclusion Mode" "t" #'org-transclusion-mode))
#+end_src
* CUSTOM FUNCS
** Text Funcs
#+begin_src emacs-lisp
(defun dfs/bump-line-up ()
  (interactive)
  (let ((cur-pos-line (- (point) (line-beginning-position)))
        (line (buffer-substring-no-properties (line-beginning-position) (line-end-position))))
    (delete-region (line-beginning-position) (+ 1 (line-end-position)))
    (beginning-of-line)
    (forward-line -1)
    (insert line)
    (newline)
    (forward-line -1)
    (forward-char cur-pos-line)))

(defun dfs/bump-line-down ()
  (interactive)
  (let ((cur-pos-line (- (point) (line-beginning-position)))
        (line (buffer-substring-no-properties (line-beginning-position) (line-end-position))))
    (delete-region (line-beginning-position) (+ 1 (line-end-position)))
    (beginning-of-line)
    (forward-line 1)
    (insert line)
    (newline)
    (forward-line -1)
    (forward-char cur-pos-line)))
#+end_src
* ORG
** SETUP
#+begin_src emacs-lisp
    (require 'org-id)
    (require 'org-expiry)

    (defun dfs-insert-created-timestamp (_)
        "Insert a 'Created' property for every todo that is created"
        (org-expiry-insert-created)
        (org-back-to-heading)
        (org-end-of-line)
        (evil-insert 1))

    (defun dfs/insert-id (_)
        "Insert an 'ID' property for every todo that is created"
        (org-id-get-create)
        (org-back-to-heading)
        (org-end-of-line)
        (evil-insert 1))

    (defun dfs/org-setup ()
        (require 'org-id)
        (require 'org-expiry)
        (advice-add 'org-insert-todo-heading :after #'dfs/insert-created-timestamp)
        (advice-add 'org-insert-todo-heading :after #'dfs/insert-id)
        (setq org-treat-insert-todo-heading-as-state-change t)
        (setq org-agenda-files '("~/work_org" "~/org"))
        (setq org-todo-keywords
                '((sequence "TODO(t!)" "PROJ(p)" "LOOP(r)" "STRT(s)" "DGATE(g@/!)" "WAIT(w@/!)" "HOLD(h@)" "IDEA(i)" "|" "DONE(d!)" "KILL(k!)")
                (sequence "[ ](T)" "[-](S)" "[?](W)" "|" "[X](D)")
                (sequence "|" "OKAY(o)" "YES(y)" "NO(n)")))
        (setq org-capture-templates
                (append
                '(("w" "Chuck Walk" table-line
                    (id  "b42729b6-1cc1-460c-a7b5-6b0eb8a3970f")
                    "| %u | %^{Time|morning|afternoon|evening} | %^{Slowdown} | %^{Notes} |")
                  ("b" "Best" entry
                    (file+headline "~/org/scratch.org" "Heading 1.1")
                    "** TODO %(s-concat \"%^{\" (s-join \"|\" '(\"Pick Animal: \" \"cat\" \"bat\" \"rat\")) \"}\")"))
                org-capture-templates))
        (setq org-log-into-drawer t)
        (setq org-agenda-follow-mode t)
        (setq org-roam-directory "~/org-roam")
        (setq org-directory "~/org")
        (org-bullets-mode 1)
        (org-babel-do-load-languages
        'org-babel-load-languages
        '((emacs-lisp . t)
          (sqlite . t))))

    (after! org
        (dfs/org-setup))

    (add-hook 'org-agenda-mode-hook #'dfs/org-setup)
    (add-hook 'org-mode-hook #'dfs/org-setup)

#+end_src

#+RESULTS:
| (closure ((hook . org-mode-hook) (--dolist-tail--) t) (&rest _) (add-hook 'before-save-hook 'org-encrypt-entries nil t)) | doom--setq-emojify-inhibit-functions-for-org-mode-h | (closure ((hook . org-mode-hook) (--dolist-tail--) t) (&rest _) (add-hook 'before-save-hook 'org-encrypt-entries nil t)) | er/add-org-mode-expansions | dfs/org-setup | +lookup--init-org-mode-handlers-h | (closure ((hook . org-mode-hook) (--dolist-tail--) t) (&rest _) (add-hook 'before-save-hook 'org-encrypt-entries nil t)) | #[0 \301\211\207 [imenu-create-index-function org-imenu-get-tree] 2] | #[0 \300\301\302\303\304$\207 [add-hook change-major-mode-hook org-show-all append local] 5] | #[0 \300\301\302\303\304$\207 [add-hook change-major-mode-hook org-babel-show-result-all append local] 5] | org-babel-result-hide-spec | org-babel-hide-all-hashes | doom-disable-show-paren-mode-h | doom-disable-show-trailing-whitespace-h | +org-enable-auto-reformat-tables-h | +org-enable-auto-update-cookies-h | +org-make-last-point-visible-h | evil-org-mode | toc-org-enable | embrace-org-mode-hook | org-eldoc-load |

** EXPOSE FUNCS

#+begin_src emacs-lisp
    (require 'ox-json)

    (defun dfs/agenda-file-names ()
        (->> org-agenda-files
            (-map #'dfs/file-or-dir-files)
            -flatten
            (-filter (lambda (x) x))
            (-remove (lambda (s) (string-match-p "/\.git" s)))
            ))

    (defun dfs/file-or-dir-files (name)
        (if (file-directory-p name)
            (directory-files-recursively name ".*\.org")
            (if (and (file-exists-p name)
                    (string-match-p ".*\.org" name))
                name
            nil)))

    (defun dfs/org-file-to-elements (name)
        (with-temp-buffer
            (insert-file-contents name)
            (org-element-parse-buffer)))

    (defun dfs/org-file-to-json (name)
        (with-temp-buffer
            (insert-file-contents name)
            (ox-json-export-to-buffer))
        (with-current-buffer "*Org JSON Export*"
            (let  ((s (buffer-string)))
            (erase-buffer)
            (kill-buffer-and-window)
            s)))

    (defun dfs/org-agenda-files-json ()
        (->> (dfs/agenda-file-names)
            (mapcar #'dfs/org-file-to-json)
            vconcat
            json-serialize))

    (defun dfs/org-agenda-file-names-json ()
        (->> (dfs/agenda-file-names)
            vconcat
            json-serialize))

#+end_src

** TODO ORG EXHIBIT/TERMS TRACKER

#+begin_src emacs-lisp
    (defun dfs/apply-concat (list-of-lists)
        (-reduce-from (lambda (acc v)
                        (append acc v))
                        '()
                        list-of-lists))

    (defun dfs/org-elements-of-type (tree type)
        (org-element-map tree type #'identity))

    (defun dfs/org-get-table-by-name (name)
        (->> (dfs/org-elements-of-type (org-element-parse-buffer) 'table)
            (-filter (lambda (table) (equal name (org-element-property :name table))))
            car))

    (defun dfs/vec->list (vec)
        (append vec '()))

    (defun dfs/row-coords->fields (row-coord)
        "must be in the table"
        (-map (lambda (coord)
                (let ((r (elt coord 0))
                    (c (elt coord 1)))
                (org-table-get r c))) row-coord))

    (defun dfs/org-table-fields ()
        (->> org-table-dlines
            dfs/vec->list
            (-filter #'identity)
            (-map-indexed (lambda (index el) (+ 1 index)))
            (-map (lambda (r)
                    (let ((c org-table-current-ncol)
                            (ret '()))
                        (while (< 0 c)
                        (setq ret (cons (list r c) ret))
                        (setq c (- c 1)))
                        ret)))
            (-map #'dfs/row-coords->fields)))

    (defun dfs/org-table-by-name->values (name)
        (save-excursion
        (let* ((tbl (dfs/org-get-table-by-name name))
                (start (org-element-property :begin tbl)))
            (goto-char (+ 1 start))
            (org-table-analyze)
            (dfs/org-table-fields))))
#+end_src
